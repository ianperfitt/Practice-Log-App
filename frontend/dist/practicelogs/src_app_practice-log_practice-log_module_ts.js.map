{"version":3,"file":"src_app_practice-log_practice-log_module_ts.js","mappings":"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","sources":["./src/app/core/guards/form.guard.ts","./src/app/practice-log/components/practice-log-command-bar/practice-log-command-bar.component.ts","./src/app/practice-log/components/practice-log-command-bar/practice-log-command-bar.component.html","./src/app/practice-log/components/practice-log-form/practice-log-form.component.ts","./src/app/practice-log/components/practice-log-form/practice-log-form.component.html","./src/app/practice-log/components/practice-log-list/practice-log-list.component.ts","./src/app/practice-log/components/practice-log-list/practice-log-list.component.html","./src/app/practice-log/enums/command-bar-actions.enum.ts","./src/app/practice-log/enums/table-actions.enum.ts","./src/app/practice-log/pages/form/form.component.ts","./src/app/practice-log/pages/form/form.component.html","./src/app/practice-log/pages/list/list.component.ts","./src/app/practice-log/pages/list/list.component.html","./src/app/practice-log/practice-log-routing.module.ts","./src/app/practice-log/practice-log.module.ts","./src/app/practice-log/services/practice-log.service.ts","./src/app/practice-log/state/practice-log.actions.ts","./src/app/practice-log/state/practice-log.effects.ts","./src/app/practice-log/state/practice-log.reducers.ts","./src/app/practice-log/state/practice-log.selectors.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, CanDeactivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nexport interface CanComponentDeactivate {\n  canDeactivate: () => Observable<boolean> | Promise<boolean> | boolean;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class FormGuard implements CanDeactivate<unknown> {\n  canDeactivate(component: CanComponentDeactivate, currentRoute: ActivatedRouteSnapshot, currentState: RouterStateSnapshot, nextState?: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    return component.canDeactivate ? component.canDeactivate() : true;\n  }\n}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { CommandBarActions } from '../../enums/command-bar-actions.enum';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-practice-log-command-bar',\n  templateUrl: './practice-log-command-bar.component.html',\n})\nexport class PracticeLogCommandBarComponent implements OnInit {\n  @Output() action = new EventEmitter<CommandBarActions>()\n  constructor(private router: Router) { }\n\n  ngOnInit(): void {\n  }\n\n  emitAction(action: CommandBarActions) {\n    this.action.emit(action);\n  }\n\n  logOut() {\n    localStorage.removeItem('token');\n    this.router.navigateByUrl('/login').then();\n  }\n\n}\n","   <p>\n    <mat-toolbar>\n      <button\n        mat-raised-button\n        color=\"primary\"\n        (click)=\"emitAction(0)\"\n        data-cy=\"create\"\n      >\n        <mat-icon>fiber_new</mat-icon> Create\n      </button>\n      &nbsp;\n      <button\n        mat-raised-button\n        color=\"warn\"\n        (click)=\"emitAction(1)\"\n        data-cy=\"delete-all\"\n      >\n        <mat-icon>delete</mat-icon> Delete All\n      </button>\n      <button mat-button color=\"danger\" (click)=\"logOut()\" data-cy=\"logout\">\n        <mat-icon>logout</mat-icon> logout\n      </button>\n    </mat-toolbar>\n  </p>\n  ","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport {  PracticeLog } from '../../models/practice-log.interface';\n\n@Component({\n  selector: 'app-practice-log-form',\n  templateUrl: './practice-log-form.component.html',\n  styleUrls: ['./practice-log-form.component.scss']\n})\n\nexport class PracticeLogFormComponent implements OnInit {\n  @Input() selectedPracticeLog: PracticeLog | null = null;\n  @Input() actionButtonLabel: string = 'Create';\n  @Output() action = new EventEmitter();\n  form: FormGroup;\n\n  constructor(private fb: FormBuilder) {\n    this.form = this.fb.group({\n      id: [''],\n      firstName: [''],\n      lastName: [''],\n      house: [''],\n      knownAs: ['']\n    })\n   }\n\n  ngOnInit(): void {\n    this.checkAction();\n  }\n\n  checkAction() {\n    if(this.selectedPracticeLog) {\n      this.actionButtonLabel = \"Update\";\n      this.patchDataValues()\n    }\n  }\n\n  patchDataValues () {\n    if(this.selectedPracticeLog)\n      this.form.patchValue(this.selectedPracticeLog);\n  }\n\n  emitAction() {\n    this.action.emit({value: this.form.value, action: this.actionButtonLabel})\n  }\n\n  clear() {\n     this.form.reset();\n  }\n}\n","<mat-card class=\"form-card\">\n    <h2>{{selectedPracticeLog ? \"Update/View Log\" : \"Create Log\"}}</h2>\n    <form class=\"practice-log-form\" [formGroup]=\"form\">\n        <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n            <mat-label>First Name</mat-label>\n            <input matInput formControlName=\"firstName\" \n                   placeholder=\"Ex. Tony\" data-cy=\"firstName\">\n        </mat-form-field>\n    \n        <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n            <mat-label>Last Name</mat-label>\n            <input matInput formControlName=\"lastName\" \n                   placeholder=\"Ex. Stark\" data-cy=\"lastName\">\n        </mat-form-field>\n    \n        <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n            <mat-label>House</mat-label>\n            <input matInput formControlName=\"house\" \n                   placeholder=\"Ex. California\" data-cy=\"house\">\n        </mat-form-field>\n    \n    \n        <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n            <mat-label>Known As</mat-label>\n            <input matInput formControlName=\"knownAs\" \n                   placeholder=\"Ex. Iron Man\" data-cy=\"action\">\n        </mat-form-field>\n        <div class=\"button-group\">\n\n            <button mat-raised-button color=\"primary\" (click)=\"emitAction()\" data-cy=\"action\">\n                 {{actionButtonLabel}}\n            </button>  \n            &nbsp;\n            <button  mat-raised-button color=\"warn\" (click)=\"clear()\">\n                 Clear\n            </button> \n        </div>\n    \n    </form>\n</mat-card>\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { TableActions } from '../../enums/table-actions.enum';\nimport { PracticeLog } from '../../models/practice-log.interface';\n\n@Component({\n  selector: 'app-practice-log-list',\n  templateUrl: './practice-log-list.component.html',\n  styleUrls: ['./practice-log-list.component.scss']\n})\nexport class PracticeLogListComponent implements OnInit {\n  @Input() headers: Array<{headerName: string, fieldName: keyof PracticeLog}> = [];\n  @Input() practiceLogs: ReadonlyArray<PracticeLog> = [];\n  @Output() practiceLog = new EventEmitter<{practiceLog: PracticeLog, action :TableActions}>();\n  headerFields: string[] = [];\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.getHeaderFields();\n  }\n\n  getHeaderFields() {\n    this.headerFields = this.headers.map((data) => data.fieldName);\n    this.headerFields.push(\"actions\");\n  }\n\n  selectPracticeLog(practiceLog: PracticeLog, action: TableActions) {\n    this.practiceLog.emit({practiceLog, action});\n  }\n\n}\n","<table mat-table [dataSource]=\"practiceLogs\" class=\"mat-elevation-z8\">\n    <!-- Data for columns -->\n    <ng-container *ngFor=\"let item of headers\" [matColumnDef]=\"item.fieldName\">\n      <th mat-header-cell *matHeaderCellDef> {{item.headerName}} </th>\n      <td mat-cell *matCellDef=\"let element\" data-cy=\"row\"> {{element[item.fieldName]}} </td>\n    </ng-container>\n    <!-- Actions for specific item -->\n    <ng-container matColumnDef=\"actions\">\n        <th mat-header-cell *matHeaderCellDef> Actions </th>\n        <td mat-cell *matCellDef=\"let element\"> \n            <button (click)=\"selectPracticeLog(element, 0)\" mat-raised-button color=\"primary\" data-cy=\"view\">\n                <mat-icon>pageview</mat-icon> View\n            </button>  \n            &nbsp;\n            <button (click)=\"selectPracticeLog(element, 1)\" mat-raised-button color=\"warn\" data-cy=\"delete\">\n                <mat-icon>delete</mat-icon> Delete\n            </button>   \n        </td>  \n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"headerFields\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: headerFields\"></tr>\n  </table>\n  ","export enum CommandBarActions {\n    Create,\n    DeleteAll\n}","export enum TableActions {\n    View,\n    Delete\n}","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { PracticeLogActions } from '../../state/practice-log.actions';\nimport { PracticeLog } from '../../models/practice-log.interface';\nimport { AppState } from 'src/app/state/app.state';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { selectPracticeLog } from '../../state/practice-log.selectors';\n\n@Component({\n  selector: 'app-form',\n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.scss']\n})\nexport class FormComponent implements OnInit{\n  practiceLog$: Observable<PracticeLog | undefined>;\n  practiceLog: PracticeLog | null = null;\n  \n  constructor(private router: ActivatedRoute, private store: Store<AppState>) {\n    const id = this.router.snapshot.params['id'];\n    this.practiceLog$ = this.store.select(selectPracticeLog(id));\n    this.practiceLog$.subscribe(d => {\n      if(d) this.practiceLog = d;\n    });\n   }\n  \n  canDeactivate(): Observable<boolean> | Promise<boolean> | boolean {\n    const confirmation = window.confirm('Are you sure?');\n    return confirmation;\n  }\n\n  ngOnInit(): void {\n  }\n\n  formAction(data: {value: PracticeLog, action: string}) {\n    switch(data.action) {\n      case \"Create\" : {\n        this.store.dispatch({type:\n          PracticeLogActions.ADD_PRACTICE_LOG_API,\n          payload: data.value});\n        return;\n      }\n      case \"Update\" : {\n        this.store.dispatch({type: PracticeLogActions.MODIFY_PRACTICE_LOG_API, payload: data.value});\n        return;\n      }\n      default: \"\"\n    }\n  }\n\n}\n","<app-practice-log-form [selectedPracticeLog]=\"practiceLog\" (action)=\"formAction($event)\"></app-practice-log-form>","import { Component, OnInit } from '@angular/core';\nimport { PracticeLog } from '../../models/practice-log.interface';\nimport { TableActions } from '../../enums/table-actions.enum';\nimport { Router } from '@angular/router';\nimport { CommandBarActions } from '../../enums/command-bar-actions.enum';\nimport { selectPracticeLogs } from '../../state/practice-log.selectors';\nimport { Store } from '@ngrx/store';\nimport { AppState } from 'src/app/state/app.state';\nimport { PracticeLogActions } from '../../state/practice-log.actions';\n\n@Component({\n  selector: 'app-list',\n  templateUrl: './list.component.html',\n  styleUrls: ['./list.component.scss']\n})\nexport class ListComponent implements OnInit {\n  practiceLogs: ReadonlyArray<PracticeLog> = [];\n  practiceLogs$ = this.store.select(selectPracticeLogs());\n\n  headers: {headerName: string, fieldName: keyof PracticeLog}[] = [\n    {headerName: \"First Name\", fieldName: \"firstName\"},\n    {headerName: \"Last Name\", fieldName: \"lastName\"},\n    {headerName: \"House\", fieldName: \"house\"},\n    {headerName: \"Known As\", fieldName: \"knownAs\"},\n  ]\n\n  constructor(\n    private router: Router,\n    private store: Store<AppState>\n    ) { }\n\n  ngOnInit(): void {\n    this.store.dispatch({type: PracticeLogActions.GET_PRACTICE_LOG_LIST});\n    this.assignPracticeLogs();\n  }\n\n  assignPracticeLogs() {\n    this.practiceLogs$.subscribe((data: readonly PracticeLog[]) => {\n      this.practiceLogs = data;\n    });\n  }\n\n  selectPracticeLog(data: {practiceLog: PracticeLog, action: TableActions}) {\n    switch(data.action) {\n      case TableActions.View: {\n        this.router.navigate(['practice-logs', 'form', data.practiceLog.id]);\n        return;\n      }\n      case TableActions.Delete: {\n        this.store.dispatch({type: PracticeLogActions.REMOVE_PRACTICE_LOG_API, payload: data.practiceLog.id});\n        return;\n\n      }\n      default: \"\"\n    }\n  }\n\n  executeCommandBarAction(action: CommandBarActions) {\n    switch(action) {\n      case CommandBarActions.Create: {\n        this.router.navigate([\"practice-logs\", \"form\"]);\n        return;\n      }\n      case CommandBarActions.DeleteAll: {\n        const ids: string[] = this.practiceLogs.map((a) => a.id);\n        this.store.dispatch({type: PracticeLogActions.REMOVE_ALL_PRACTICE_LOG_API, payload: ids});\n        return;\n      }\n      default: \"\"\n    }\n  }\n}\n","<app-practice-log-command-bar (action)=\"executeCommandBarAction($event)\"></app-practice-log-command-bar>\n<app-practice-log-list [practiceLogs]=\"practiceLogs\" (practiceLog)=\"selectPracticeLog($event)\"[headers]=\"headers\"></app-practice-log-list>\n\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { ListComponent } from \"./pages/list/list.component\";\nimport { FormComponent } from \"./pages/form/form.component\";\nimport { FormGuard } from \"../core/guards/form.guard\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: ListComponent,\n  },\n  {\n    path: \"form\",\n    children: [\n      {\n        path: \"\",\n        canDeactivate: [FormGuard],\n        component: FormComponent\n      },\n      {\n        path: \":id\",\n        canDeactivate: [FormGuard],\n        component: FormComponent\n      }\n    ]\n  },\n];\n\n@NgModule({\n  declarations: [],\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class PracticeLogRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PracticeLogCommandBarComponent } from './components/practice-log-command-bar/practice-log-command-bar.component';\nimport { PracticeLogListComponent } from './components/practice-log-list/practice-log-list.component';\nimport { PracticeLogFormComponent } from './components/practice-log-form/practice-log-form.component';\nimport { PracticeLogRoutingModule } from './practice-log-routing.module';\nimport { ListComponent } from './pages/list/list.component';\nimport { FormComponent } from './pages/form/form.component';\nimport { MaterialModule } from '../material/material.module';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { practiceLogReducer } from './state/practice-log.reducers';\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\nimport { PracticeLogEffects } from './state/practice-log.effects';\n\n\n@NgModule({\n  declarations: [\n    PracticeLogListComponent,\n    PracticeLogFormComponent,\n    PracticeLogCommandBarComponent,\n    ListComponent,\n    FormComponent,\n  ],\n  imports: [\n    CommonModule,\n    PracticeLogRoutingModule,\n    MaterialModule,\n    ReactiveFormsModule,\n    StoreModule.forFeature('practiceLogState', practiceLogReducer),\n    EffectsModule.forFeature([PracticeLogEffects])\n  ]\n})\nexport class PracticeLogModule { }\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { catchError, Observable, tap, throwError } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { PracticeLog } from '../models/practice-log.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PracticeLogService {\n\n  constructor(private http: HttpClient) { }\n\n  \n  getPracticeLogs(): Observable<PracticeLog[]> {\n    return this.http.get<PracticeLog[]>(`${environment.apiURL}/practice-logs`).pipe(\n      tap((data: PracticeLog[]) => data),\n      catchError(err => throwError(() => err))\n   )\n  }\n\n  getPracticeLog(id: string): Observable<PracticeLog> {\n    return this.http.get<PracticeLog>(`${environment.apiURL}/practice-logs/${id}`).pipe(\n       tap((data: PracticeLog) => data),\n       catchError(err => throwError(() => err))\n    )\n   }\n\n  addPracticeLog(practiceLog: PracticeLog) : Observable<PracticeLog> {\n\n    return this.http.post<PracticeLog>(`${environment.apiURL}/practice-logs`, practiceLog).pipe(\n      tap((data: PracticeLog) => data),\n      catchError(err => throwError(() => err))\n   )\n  }\n\n  updatePracticeLog(id:string, practiceLog: PracticeLog) : Observable<PracticeLog> {\n    return this.http.put<PracticeLog>(`${environment.apiURL}/practice-logs/${id}`, practiceLog).pipe(\n      catchError(err => throwError(() => err))\n   )\n  }\n\n   deletePracticeLog(id:string) : Observable<PracticeLog> {\n    return this.http.delete<PracticeLog>(`${environment.apiURL}/practice-logs/${id}`).pipe(\n      catchError(err => throwError(() => err))\n   )\n  }\n}\n","import { createAction, props } from \"@ngrx/store\";\nimport { PracticeLog } from \"../models/practice-log.interface\";\n\n\nexport enum PracticeLogActions {\n    GET_PRACTICE_LOG_LIST = '[Practice-Log] Get Practice-Log list',\n    SET_PRACTICE_LOG_LIST = '[Practice-Log] Set Practice-Log list',\n    ADD_PRACTICE_LOG_API = '[Practice-Log] Add Practice-Log (API)',\n    ADD_PRACTICE_LOG_STATE = '[Practice-Log] Add Practice-Log (STATE)',\n    MODIFY_PRACTICE_LOG_API = '[Practice-Log] Modify Practice-Log (API)',\n    MODIFY_PRACTICE_LOG_STATE = '[Practice-Log] Modify Practice-Log (STATE)',\n    REMOVE_PRACTICE_LOG_API = '[Practice-Log] Remove Practice-Log (API)',\n    REMOVE_PRACTICE_LOG_STATE = '[Practice-Log] Remove Practice-Log (STATE)',\n    REMOVE_ALL_PRACTICE_LOG_API = '[Practice-Log] Remove All Practice-Log (API)',\n    REMOVE_ALL_PRACTICE_LOG_STATE = '[Practice-Log] Remove ALL Practice-Log (STATE)',\n}\n\nexport const modifyPracticeLogState = createAction(\n    PracticeLogActions.MODIFY_PRACTICE_LOG_STATE,\n    props<{ practiceLog: PracticeLog}>()\n);\n\nexport const addPracticeLogState = createAction(\n    PracticeLogActions.ADD_PRACTICE_LOG_STATE,\n    props<{ practiceLog: PracticeLog }>()\n);\n\nexport const removePracticeLogState = createAction(\n    PracticeLogActions.REMOVE_PRACTICE_LOG_STATE,\n    props<{ practiceLogId: string}>()\n);\n\nexport const getPracticeLogList = createAction(\n    PracticeLogActions.GET_PRACTICE_LOG_LIST,\n);\n\nexport const setPracticeLogList = createAction(\n    PracticeLogActions.SET_PRACTICE_LOG_LIST,\n    props<{ practiceLogs: ReadonlyArray<PracticeLog> }>()\n);\n\nexport const removeAllPracticeLogState = createAction(\n    PracticeLogActions.REMOVE_ALL_PRACTICE_LOG_STATE\n  );","import { Injectable } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { Actions, createEffect, ofType } from \"@ngrx/effects\";\nimport { PracticeLogActions } from \"./practice-log.actions\";\nimport { EMPTY, catchError, forkJoin, map, mergeMap, tap } from \"rxjs\";\nimport { PracticeLog } from \"../models/practice-log.interface\";\nimport { PracticeLogService } from \"../services/practice-log.service\";\n\n@Injectable()\nexport class PracticeLogEffects {\n\n    getPracticeLogs$ = createEffect(() => {\n        return this.actions$.pipe(\n            ofType(PracticeLogActions.GET_PRACTICE_LOG_LIST),\n            mergeMap(() => this.practiceLogService.getPracticeLogs()\n            .pipe(\n                map(practiceLogs => ({ type: PracticeLogActions.SET_PRACTICE_LOG_LIST, practiceLogs})),\n                catchError(() => EMPTY)\n            ))\n        )\n    }, {dispatch: true});\n\n    removePracticeLog$  = createEffect(()  => {\n        return this.actions$.pipe(\n            ofType(PracticeLogActions.REMOVE_PRACTICE_LOG_API),\n            mergeMap((data: { payload: string}) =>\n                this.practiceLogService.deletePracticeLog(data.payload)\n                .pipe(\n                    map(() => ({type:\n                      PracticeLogActions.REMOVE_PRACTICE_LOG_STATE,\n                      practiceLogId: data.payload })),\n                    catchError(() => EMPTY)\n                ))\n            )\n        }, {dispatch: true}\n    );\n\n    // add practice-logs in the database\n  addPracticeLog$ = createEffect(() =>{\n    return this.actions$.pipe(\n        ofType(PracticeLogActions.ADD_PRACTICE_LOG_API),\n        mergeMap((data: {type: string, payload: PracticeLog}) => this.practiceLogService.addPracticeLog(data.payload)\n          .pipe(\n            map(practiceLogs => ({ type: PracticeLogActions.ADD_PRACTICE_LOG_STATE, practiceLog: data.payload })),\n            tap(() =>  this.router.navigate([\"practice-logs\"])),\n            catchError(() => EMPTY)\n          ))\n        )\n    }, {dispatch: true})\n\n    modifyPracticeLog$ = createEffect(() =>{\n        return this.actions$.pipe(\n            ofType(PracticeLogActions.MODIFY_PRACTICE_LOG_API),\n            mergeMap((data: {type: string, payload: PracticeLog}) => this.practiceLogService.updatePracticeLog(data.payload.id, data.payload)\n              .pipe(\n                map(practiceLogs => ({ type: PracticeLogActions.MODIFY_PRACTICE_LOG_STATE, practiceLog: data.payload })),\n                tap(() =>  this.router.navigate([\"practice-logs\"])),\n                catchError(() => EMPTY)\n              ))\n            )\n        }, {dispatch: true})\n\n  // remove all practice logs in the database\n  removeAllPracticeLog$ = createEffect(() => {\n    return this.actions$.pipe(\n        ofType(PracticeLogActions.REMOVE_ALL_PRACTICE_LOG_API),\n        mergeMap((data: {type: string, payload: string[]}) =>\n        forkJoin([...data.payload.map((id) => this.practiceLogService.deletePracticeLog(id))])\n          .pipe(\n            map(() => ({ type: PracticeLogActions.REMOVE_ALL_PRACTICE_LOG_STATE })),\n            catchError(() => EMPTY)\n          ))\n        )\n    }, {dispatch: true}\n  );\n\n\n    constructor(\n        private actions$: Actions,\n        private practiceLogService: PracticeLogService,\n        private router: Router\n    ) {}\n}\n","import { createReducer, on } from '@ngrx/store';\nimport { PracticeLog } from '../models/practice-log.interface';\nimport { addPracticeLogState, modifyPracticeLogState, removeAllPracticeLogState, removePracticeLogState, setPracticeLogList } from './practice-log.actions';\n\nexport interface PracticeLogState {\n    practiceLogs: ReadonlyArray<PracticeLog>;\n}\n\nexport const initialState: PracticeLogState = {\n    practiceLogs: []\n}\n\nexport const practiceLogReducer = createReducer(\n  initialState,\n  on(setPracticeLogList, (state, { practiceLogs }) => { return {...state, practiceLogs}}),\n  on(removePracticeLogState, (state, { practiceLogId}) => {\n    return {...state, practiceLogs:\n    state.practiceLogs.filter(data => data.id != practiceLogId)}}),\n    on(addPracticeLogState, (state, {practiceLog}) => {\n      return {...state, practiceLogs: [...state.practiceLogs,\n        practiceLog]}\n    }),\n    on(modifyPracticeLogState, (state, {practiceLog}) => {\n      return {...state, practiceLogs: state.practiceLogs.map(data => data.id === practiceLog.id ? practiceLog : data)}\n    }),\n    on(removeAllPracticeLogState, (state) => {\n      return {...state, practiceLogs: []}\n    }),\n  );\n","import { createFeatureSelector, createSelector } from \"@ngrx/store\"\nimport { PracticeLogState } from \"./practice-log.reducers\"\n\nexport const selectPracticeLogState  = \ncreateFeatureSelector<PracticeLogState>('practiceLogState')\n\nexport const selectPracticeLogs = () => createSelector(\n    selectPracticeLogState,\n    (state: PracticeLogState) => state.practiceLogs\n)\n\nexport const selectPracticeLog = (id: string) => createSelector(\n    selectPracticeLogState,\n    (state: PracticeLogState) => state.practiceLogs.find(d => d.id === id)\n)"],"names":[],"sourceRoot":"webpack:///"}