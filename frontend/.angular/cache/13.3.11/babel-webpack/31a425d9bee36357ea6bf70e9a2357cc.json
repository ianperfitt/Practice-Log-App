{"ast":null,"code":"import { catchError, tap, throwError } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let PracticeLogService = /*#__PURE__*/(() => {\n  class PracticeLogService {\n    constructor(http) {\n      this.http = http;\n    }\n\n    getPracticeLogs() {\n      return this.http.get(`${environment.apiURL}/practice-logs`).pipe(tap(data => data), catchError(err => throwError(() => err)));\n    }\n\n    getPracticeLog(id) {\n      return this.http.get(`${environment.apiURL}/practice-logs/${id}`).pipe(tap(data => data), catchError(err => throwError(() => err)));\n    }\n\n    addPracticeLog(practiceLog) {\n      return this.http.post(`${environment.apiURL}/practice-logs`, practiceLog).pipe(tap(data => data), catchError(err => throwError(() => err)));\n    }\n\n    updatePracticeLog(id, practiceLog) {\n      return this.http.put(`${environment.apiURL}/practice-logs/${id}`, practiceLog).pipe(catchError(err => throwError(() => err)));\n    }\n\n    deletePracticeLog(id) {\n      return this.http.delete(`${environment.apiURL}/practice-logs/${id}`).pipe(catchError(err => throwError(() => err)));\n    }\n\n  }\n\n  PracticeLogService.ɵfac = function PracticeLogService_Factory(t) {\n    return new (t || PracticeLogService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  PracticeLogService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PracticeLogService,\n    factory: PracticeLogService.ɵfac,\n    providedIn: 'root'\n  });\n  return PracticeLogService;\n})();","map":null,"metadata":{},"sourceType":"module"}