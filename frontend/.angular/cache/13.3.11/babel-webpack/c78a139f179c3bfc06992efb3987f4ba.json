{"ast":null,"code":"import { catchError, tap, throwError } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@auth0/angular-jwt\";\nimport * as i3 from \"@angular/router\";\nexport let AuthenticateService = /*#__PURE__*/(() => {\n  class AuthenticateService {\n    constructor(http, jwtHelper, router) {\n      this.http = http;\n      this.jwtHelper = jwtHelper;\n      this.router = router;\n    }\n\n    login(data) {\n      return this.http.post(`${environment.authURL}/authenticate`, data).pipe(tap(data => data), catchError(err => throwError(() => err)));\n    }\n\n    register(data) {\n      return this.http.post(`${environment.authURL}/register`, data).pipe(tap(data => data), catchError(err => throwError(() => err)));\n    }\n\n    isAuthenticated() {\n      var _a;\n\n      const token = (_a = localStorage.getItem('token')) !== null && _a !== void 0 ? _a : ''; // Check whether thee token is expired and return\n      // true or false\n\n      return !this.jwtHelper.isTokenExpired(token);\n    }\n\n    doLogout() {\n      let removeToken = localStorage.removeItem('token');\n\n      if (removeToken == null) {\n        this.router.navigate(['login']);\n      }\n    }\n\n  }\n\n  AuthenticateService.ɵfac = function AuthenticateService_Factory(t) {\n    return new (t || AuthenticateService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.JwtHelperService), i0.ɵɵinject(i3.Router));\n  };\n\n  AuthenticateService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticateService,\n    factory: AuthenticateService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthenticateService;\n})();","map":null,"metadata":{},"sourceType":"module"}