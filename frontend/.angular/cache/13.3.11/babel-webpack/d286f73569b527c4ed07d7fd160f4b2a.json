{"ast":null,"code":"import { TableActions } from '../../enums/table-actions.enum';\nimport { CommandBarActions } from '../../enums/command-bar-actions.enum';\nimport { selectPracticeLogs } from '../../state/practice-log.selectors';\nimport { PracticeLogActions } from '../../state/practice-log.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@ngrx/store\";\nimport * as i3 from \"../../components/practice-log-command-bar/practice-log-command-bar.component\";\nimport * as i4 from \"../../components/practice-log-list/practice-log-list.component\";\nexport let ListComponent = /*#__PURE__*/(() => {\n  class ListComponent {\n    constructor(router, store) {\n      this.router = router;\n      this.store = store;\n      this.practiceLogs = [];\n      this.practiceLogs$ = this.store.select(selectPracticeLogs());\n      this.headers = [{\n        headerName: \"Instrument\",\n        fieldName: \"instrument\"\n      }, {\n        headerName: \"Key\",\n        fieldName: \"key\"\n      }, {\n        headerName: \"Tempo\",\n        fieldName: \"tempo\"\n      }, {\n        headerName: \"Description\",\n        fieldName: \"description\"\n      }];\n    }\n\n    ngOnInit() {\n      this.store.dispatch({\n        type: PracticeLogActions.GET_PRACTICE_LOG_LIST\n      });\n      this.assignPracticeLogs();\n    }\n\n    assignPracticeLogs() {\n      this.practiceLogs$.subscribe(data => {\n        this.practiceLogs = data;\n      });\n    }\n\n    selectPracticeLog(data) {\n      switch (data.action) {\n        case TableActions.View:\n          {\n            this.router.navigate(['practice-logs', 'form', data.practiceLog.id]);\n            return;\n          }\n\n        case TableActions.Delete:\n          {\n            this.store.dispatch({\n              type: PracticeLogActions.REMOVE_PRACTICE_LOG_API,\n              payload: data.practiceLog.id\n            });\n            return;\n          }\n\n        default:\n          \"\";\n      }\n    }\n\n    executeCommandBarAction(action) {\n      switch (action) {\n        case CommandBarActions.Create:\n          {\n            this.router.navigate([\"practice-logs\", \"form\"]);\n            return;\n          }\n\n        case CommandBarActions.DeleteAll:\n          {\n            const ids = this.practiceLogs.map(a => a.id);\n            this.store.dispatch({\n              type: PracticeLogActions.REMOVE_ALL_PRACTICE_LOG_API,\n              payload: ids\n            });\n            return;\n          }\n\n        default:\n          \"\";\n      }\n    }\n\n  }\n\n  ListComponent.ɵfac = function ListComponent_Factory(t) {\n    return new (t || ListComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.Store));\n  };\n\n  ListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ListComponent,\n    selectors: [[\"app-list\"]],\n    decls: 2,\n    vars: 2,\n    consts: [[3, \"action\"], [3, \"practiceLogs\", \"headers\", \"practiceLog\"]],\n    template: function ListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"app-practice-log-command-bar\", 0);\n        i0.ɵɵlistener(\"action\", function ListComponent_Template_app_practice_log_command_bar_action_0_listener($event) {\n          return ctx.executeCommandBarAction($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(1, \"app-practice-log-list\", 1);\n        i0.ɵɵlistener(\"practiceLog\", function ListComponent_Template_app_practice_log_list_practiceLog_1_listener($event) {\n          return ctx.selectPracticeLog($event);\n        });\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"practiceLogs\", ctx.practiceLogs)(\"headers\", ctx.headers);\n      }\n    },\n    directives: [i3.PracticeLogCommandBarComponent, i4.PracticeLogListComponent],\n    styles: [\"button[_ngcontent-%COMP%]{margin-right:10px}\"]\n  });\n  return ListComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}