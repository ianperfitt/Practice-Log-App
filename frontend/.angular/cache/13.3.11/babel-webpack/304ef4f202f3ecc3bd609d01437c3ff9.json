{"ast":null,"code":"import { createEffect, ofType } from \"@ngrx/effects\";\nimport { PracticeLogActions } from \"./practice-log.actions\";\nimport { EMPTY, catchError, forkJoin, map, mergeMap, tap } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../services/practice-log.service\";\nimport * as i3 from \"@angular/router\";\nexport let PracticeLogEffects = /*#__PURE__*/(() => {\n  class PracticeLogEffects {\n    constructor(actions$, practiceLogService, router) {\n      this.actions$ = actions$;\n      this.practiceLogService = practiceLogService;\n      this.router = router;\n      this.getPracticeLogs$ = createEffect(() => {\n        return this.actions$.pipe(ofType(PracticeLogActions.GET_PRACTICE_LOG_LIST), mergeMap(() => this.practiceLogService.getPracticeLogs().pipe(map(practiceLogs => ({\n          type: PracticeLogActions.SET_PRACTICE_LOG_LIST,\n          practiceLogs\n        })), catchError(() => EMPTY))));\n      }, {\n        dispatch: true\n      });\n      this.removePracticeLog$ = createEffect(() => {\n        return this.actions$.pipe(ofType(PracticeLogActions.REMOVE_PRACTICE_LOG_API), mergeMap(data => this.practiceLogService.deletePracticeLog(data.payload).pipe(map(() => ({\n          type: PracticeLogActions.REMOVE_PRACTICE_LOG_STATE,\n          practiceLogId: data.payload\n        })), catchError(() => EMPTY))));\n      }, {\n        dispatch: true\n      }); // add practice-logs in the database\n\n      this.addPracticeLog$ = createEffect(() => {\n        return this.actions$.pipe(ofType(PracticeLogActions.ADD_PRACTICE_LOG_API), mergeMap(data => this.practiceLogService.addPracticeLog(data.payload).pipe(map(practiceLogs => ({\n          type: PracticeLogActions.ADD_PRACTICE_LOG_STATE,\n          practiceLog: data.payload\n        })), tap(() => this.router.navigate([\"practice-logs\"])), catchError(() => EMPTY))));\n      }, {\n        dispatch: true\n      });\n      this.modifyPracticeLog$ = createEffect(() => {\n        return this.actions$.pipe(ofType(PracticeLogActions.MODIFY_PRACTICE_LOG_API), mergeMap(data => this.practiceLogService.updatePracticeLog(data.payload.id, data.payload).pipe(map(practiceLogs => ({\n          type: PracticeLogActions.MODIFY_PRACTICE_LOG_STATE,\n          practiceLog: data.payload\n        })), tap(() => this.router.navigate([\"practice-logs\"])), catchError(() => EMPTY))));\n      }, {\n        dispatch: true\n      }); // remove all practice logs in the database\n\n      this.removeAllPracticeLog$ = createEffect(() => {\n        return this.actions$.pipe(ofType(PracticeLogActions.REMOVE_ALL_PRACTICE_LOG_API), mergeMap(data => forkJoin([...data.payload.map(id => this.practiceLogService.deletePracticeLog(id))]).pipe(map(() => ({\n          type: PracticeLogActions.REMOVE_ALL_PRACTICE_LOG_STATE\n        })), catchError(() => EMPTY))));\n      }, {\n        dispatch: true\n      });\n    }\n\n  }\n\n  PracticeLogEffects.ɵfac = function PracticeLogEffects_Factory(t) {\n    return new (t || PracticeLogEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.PracticeLogService), i0.ɵɵinject(i3.Router));\n  };\n\n  PracticeLogEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PracticeLogEffects,\n    factory: PracticeLogEffects.ɵfac\n  });\n  return PracticeLogEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}